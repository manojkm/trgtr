// ================================================================================================
// File Name: mixins.scss
// Description: 
// ----------------------------------------------------------------------------------------------
// Item Name: xxx - Responsive Admin Theme
// Version: 1.2
// Author: MANOJ
// Author URL: http://www.themeforest.net/user/xxx
// ================================================================================================

//----------------------------------*\
// THEMIFY
//----------------------------------*/

/* Adapted from https://github.com/nborracha/plainID-DemoApp/blob/61b66cf018e918bcb17aa87f243fce2bc95d9833/app/styles/mixins.scss */

/*
@access private
@param {String} $property - Property to themify
@param {String} $key - Key color to use from theme
@param {Map} $themes [$themes] - Map of themes to use
*/
@mixin themify($property, $key, $color-variant:null, $themes: $themes, $default-theme: $default-theme) {
  // Iterate over the themes

  /// We'll be setting a default color for the selector incase no theme was set.
  $default-colors: map-get-strict($default-theme, 'colors');
  $default-color: null;

  @each $themeName, $value in $themes {

    $colors: map-get-strict($value, 'colors');
    $color: null;

    /// color variant is optional
    @if ($color-variant != null) {
      /// map inception
      $color: map-get-strict(map-get-strict($colors, $key), $color-variant);
      $default-color: map-get-strict(map-get-strict($default-colors, $key), $color-variant);
    } @else {
      $color: map-get-strict($colors, $key);
      $default-color: map-get-strict($default-colors, $key);
    }

    /// Create fallback color based on the default theme
    & {
      // Output the declaration
      #{$property}: $default-color;
    }

    /// Create a selector (e.g. `.media.theme-light, .theme-light .media`)
    /* &.theme-#{$themeName},*/
    .theme-#{$themeName} & {
      // Output the declaration
      #{$property}: $color;
    }
  }
}

/// Shorthand to themify color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin color($arguments...) {
  @include themify('color', $arguments...);
}

/// Shorthand to themify border-color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin border-color($arguments...) {
  @include themify('border-color', $arguments...);
}

/// Shorthand to themify border-left-color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin border-left-color($arguments...) {
  @include themify('border-left-color', $arguments...);
}

/// Shorthand to themify border-right-color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin border-right-color($arguments...) {
  @include themify('border-right-color', $arguments...);
}

/// Shorthand to themify border-top-color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin border-top-color($arguments...) {
  @include themify('border-top-color', $arguments...);
}

/// Shorthand to themify border-bottom-color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin border-bottom-color($arguments...) {
  @include themify('border-bottom-color', $arguments...);
}

/// Shorthand to themify background-color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin background-color($arguments...) {
  @include themify('background-color', $arguments...);
}

/// Shorthand to themify --box-shadow-color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin box-shadow-color($arguments...) {
  @include themify('--box-shadow-color', $arguments...);
}

/// Shorthand to themify font family through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin font-family($arguments...) {
  @include themify('font-family', $arguments...);
}

//----------------------------------*\
// WIDTH
//----------------------------------*/
/*
Usage @include size(10px, 20px), @include size(25px);
Adapted from https://bumbu.github.io/sass-width-mixin/
*/

@mixin size($width, $height...) {
  @if length($height) == 1 {
    height: $height;
    width: $width;
  } @else {
    height: $width;
    width: $width;
  }
}

//----------------------------------*\
// REM FONT SIZING  - ADVANCED
//----------------------------------*/
/*
Adapted from http://www.stubbornella.org/content/2013/07/01/easy-peasy-rem-conversion-with-sass/
Usage @include fontSize(16px);
*/

@mixin font-size($size) {
  font-size: $size; //Fallback in px
  font-size: calculateRem($size);
}

//----------------------------------*\
// TEXT SHADOW
//----------------------------------*/
@mixin text-shadow($tShadow : 0px 1px 3px rgba(0,0,0,.5)) {
  -webkit-box-shadow: $tShadow;
  -moz-box-shadow: $tShadow;
  -o-box-shadow: $tShadow;
  box-shadow: $tShadow;
}

//----------------------------------*\
// TRANSITIONS
//----------------------------------*/
/*
Usage @include transition(color .3s ease); @include transition;
*/
@mixin transition($transitionvalue : all 0.5s ease) {
  -webkit-transition: $transitionvalue;
  -o-transition: $transitionvalue;
  -moz-transition: $transitionvalue;
  transition: $transitionvalue;
}

//----------------------------------*\
// BORDER RADIUS
//----------------------------------*/
/*
Usage @include border-radius(4px);
*/
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

//----------------------------------*\
// OPACITY
//----------------------------------*/
/*
Usage @include opacity(1);
*/
@mixin opacity($opacity) {
  opacity: $opacity;
  // IE8 filter
  $opacity-ie: ($opacity * 100);
  filter: #{alpha(opacity=$opacity-ie)};
}

//----------------------------------*\
// BORDER
//----------------------------------*/
/*
Usage
@include add-border(1px, #cccccc,top);
@include add-border(1px, #cccccc,right-left);
@include add-border(1px, #cccccc, all);
*/
@mixin add-border($size, $color, $position) {
  @if $position == 'all' {
    border: $size solid $color;
  } @else if $position == 'top' {
    border-top: $size solid $color;
  } @else if $position == 'bottom' {
    border-bottom: $size solid $color;
  } @else if $position == 'right' {
    border-right: $size solid $color;
  } @else if $position == 'left' {
    border-left: $size solid $color;
  } @else if $position == 'top-bottom' {
    border-top: $size solid $color;
    border-bottom: $size solid $color;
  } @else if $position == 'right-left' {
    border-left: $size solid $color;
    border-right: $size solid $color;
  }
}

//----------------------------------*\
// VENDOR PREFIX
//----------------------------------*/

@mixin vendor($property, $value...) {
  -webkit-#{$property}: $value;
  -moz-#{$property}: $value;
  -ms-#{$property}: $value;
  -o-#{$property}: $value;
  #{$property}: $value;
}

//----------------------------------*\
// CLEARFIX FOR IE8 & ABOVE
//----------------------------------*/
/* Adapted from http://css-tricks.com/snippets/css/clear-fix/ */

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

//----------------------------------*\
// CENTERING
//----------------------------------*/
/* Center vertically and/or horizontally an absolute positioned element */

@mixin center($xy:xy) {
  @if $xy == xy {
    left: 50%;
    top: 50%;
    bottom: auto;
    right: auto;
    @include transform(translateX(-50%) translateY(-50%));
  } @else if $xy == x {
    left: 50%;
    right: auto;
    @include transform(translateX(-50%));
  } @else if $xy == y {
    top: 50%;
    bottom: auto;
    @include transform(translateY(-50%));
  }
}

//----------------------------------*\
// BUTTONS
//----------------------------------*/

// TODO: http://demos.creative-tim.com/now-ui-kit/documentation/tutorial-components.html?ref=nuk-free-doc#buttons-row

@mixin btn-theme($theme-color, $bg:fill, $tone:base, $tone-hover:dark, $font-color:font-color) {

  @if map-has-key($contextual, $theme-color) { /* Contextual variations */
    border-color: setcolor($theme-color, $tone);
    /* Filled button */
    @if $bg == fill {
      background-color: setcolor($theme-color, $tone);
      color: setcolor($theme-color, $font-color);
    }
    /* Outline button */
    @if $bg == outline {
      background-color: transparent;
      color: setcolor($theme-color, $tone);
    }

  } @else { /* Theme variations */
    @include border-color($theme-color, $tone);
    /* Filled button */
    @if $bg == fill {
      @include background-color($theme-color, $tone);
      @include color($theme-color, $font-color);
    }
    /* Outline button */
    @if $bg == outline {
      background-color: transparent;
      @include color($theme-color, $tone);
    }

  }

  #{$a-tags},
  .show > &.dropdown-toggle,
  .show > &.dropdown-toggle:focus,
  .show > &.dropdown-toggle:hover {

    @if map-has-key($contextual, $theme-color) { /* Contextual variations */
      border-color: setcolor($theme-color, $tone-hover);
      background-color: setcolor($theme-color, $tone-hover);
      color: setcolor($theme-color, $font-color);
    } @else { /* Theme variations */
      @include border-color($theme-color, $tone-hover);
      @include background-color($theme-color, $tone-hover);
      @include color($theme-color, $font-color);
    }

    box-shadow: none;
    outline: 0;
  }

  &:hover {
    //box-shadow: 0 3px 8px 0 rgba(0, 0, 0, 0.17);
    //box-shadow: 0 .125em $off-wht, inset 0 .063em $off-wht;
  }

  &.disabled,
  &:disabled,
  &[disabled],
  fieldset[disabled] & {
    &,
    #{$a-tags} {

      @if map-has-key($contextual, $theme-color) { /* Contextual variations */
        border-color: setcolor($theme-color, $tone);
        /* Filled button */
        @if $bg == fill {
          background-color: setcolor($theme-color, $tone);
          color: setcolor($theme-color, $font-color);
        }
        /* Outline button */
        @if $bg == outline {
          background-color: transparent;
          color: setcolor($theme-color, $tone);
        }

      } @else { /* Theme variations */
        @include border-color($theme-color, $tone);
        /* Filled button */
        @if $bg == fill {
          @include background-color($theme-color, $tone);
          @include color($theme-color, $font-color);
        }
        /* Outline button */
        @if $bg == outline {
          background-color: transparent;
          @include color($theme-color, $tone);
        }

      }

    }
  }

  &.btn-link {
    background-color: transparent;

    @if map-has-key($contextual, $theme-color) { /* Contextual variations */
      color: setcolor($theme-color, $tone);
    } @else { /* Theme variations */
      @include color($theme-color, $tone);
    }

    #{$a-tags},
    .show > &.dropdown-toggle,
    .show > &.dropdown-toggle:focus,
    .show > &.dropdown-toggle:hover {
      background-color: transparent;
      text-decoration: none;
      box-shadow: none;

      @if map-has-key($contextual, $theme-color) {
        color: setcolor($theme-color, $tone-hover);
      } @else {
        @include color($theme-color, $tone-hover);
      }
    }

    &.disabled,
    &:disabled,
    &[disabled],
    fieldset[disabled] & {
      &,
      #{$a-tags} {
        background-color: transparent;
        text-decoration: none;
        box-shadow: none;
        @if map-has-key($contextual, $theme-color) { /* Contextual variations */
          color: setcolor($theme-color, $tone);
        } @else { /* Theme variations */
          @include color($theme-color, $tone);
        }

      }

    }

  }
}

//----------------------------------*\
// BUTTONS SIZES
//----------------------------------*/

@mixin btn-size($min-width, $min-height, $font-size, $border) {
  @include font-size($font-size);
  @include border-radius($border);
  //padding: $padding-y $padding-x;
  min-width: $min-width;
  min-height: $min-height;
}

//----------------------------------*\
// BADGES
//----------------------------------*/

@mixin badges-theme($theme-color, $bg:fill, $tone:base, $tone-hover:dark, $font-color:font-color) {

  @if map-has-key($contextual, $theme-color) { /* Contextual variations */
    border-color: setcolor($theme-color, $tone);
    /* Filled button */
    @if $bg == fill {
      background-color: setcolor($theme-color, $tone);
      color: setcolor($theme-color, $font-color);
    }
    /* Outline button */
    @if $bg == outline {
      background-color: transparent;
      color: setcolor($theme-color, $tone);
    }

  } @else { /* Theme variations */
    @include border-color($theme-color, $tone);
    /* Filled button */
    @if $bg == fill {
      @include background-color($theme-color, $tone);
      @include color($theme-color, $font-color);
    }
    /* Outline button */
    @if $bg == outline {
      background-color: transparent;
      @include color($theme-color, $tone);
    }

  }
  /* Link Badges */
  #{$a-href-tags} {
    @if map-has-key($contextual, $theme-color) { /* Contextual variations */
      background-color: setcolor($theme-color, $tone-hover);
      color: setcolor($theme-color, $font-color);
    } @else { /* Theme variations */
      @include background-color($theme-color, $tone-hover);
      @include color($theme-color, $font-color);
    }

  }

  &:hover {
    //box-shadow: 0 3px 8px 0 rgba(0, 0, 0, 0.17);
    //box-shadow: 0 .125em $off-wht, inset 0 .063em $off-wht;
  }

  &.disabled,
  &:disabled,
  &[disabled] {
    &,
    #{$a-href-tags} {

      @if map-has-key($contextual, $theme-color) { /* Contextual variations */
        /* Filled button */
        @if $bg == fill {
          background-color: setcolor($theme-color, $tone);
          color: setcolor($theme-color, $font-color);
        }
        /* Outline button */
        @if $bg == outline {
          background-color: transparent;
          color: setcolor($theme-color, $tone);
        }

      } @else { /* Theme variations */
        @include border-color($theme-color, $tone);
        /* Filled button */
        @if $bg == fill {
          @include background-color($theme-color, $tone);
          @include color($theme-color, $font-color);
        }
        /* Outline button */
        @if $bg == outline {
          background-color: transparent;
          @include color($theme-color, $tone);
        }

      }

    }
  }
}

//----------------------------------*\
// POPOVERS
//----------------------------------*/

@mixin popover-theme($theme-color, $tone:base, $header-tone:dark, $border-tone:dark, $font-color:font-color) {

  @if map-has-key($contextual, $theme-color) { /* Contextual variations */
    background-color: setcolor($theme-color, $tone);
    border-color: setcolor($theme-color, $border-tone);
  } @else { /* Theme variations */
    @include background-color($theme-color, $tone);
    @include border-color($theme-color, $border-tone);
  }

  .popover-body {
    @if map-has-key($contextual, $theme-color) { /* Contextual variations */
      color: setcolor($theme-color, $font-color);
    } @else { /* Theme variations */
      @include color($theme-color, $font-color);
    }
  }

  &.bs-popover-right .arrow:after {
    @if map-has-key($contextual, $theme-color) { /* Contextual variations */
      border-right-color: setcolor($theme-color, $tone);
    } @else { /* Theme variations */
      @include border-right-color($theme-color, $tone);
    }
  }

  &.bs-popover-top .arrow:after {
    @if map-has-key($contextual, $theme-color) { /* Contextual variations */
      border-top-color: setcolor($theme-color, $tone);
    } @else { /* Theme variations */
      @include border-top-color($theme-color, $tone);
    }
  }

  &.bs-popover-bottom .arrow:after {
    @if map-has-key($contextual, $theme-color) { /* Contextual variations */
      border-bottom-color: setcolor($theme-color, $tone);
    } @else { /* Theme variations */
      @include border-bottom-color($theme-color, $tone);
    }
  }

  &.bs-popover-left .arrow:after {
    @if map-has-key($contextual, $theme-color) { /* Contextual variations */
      border-left-color: setcolor($theme-color, $tone);
    } @else { /* Theme variations */
      @include border-left-color($theme-color, $tone);
    }
  }

  .popover-header {
    //border: 0;
    //margin-top: 5px;
    @if map-has-key($contextual, $theme-color) { /* Contextual variations */
      color: setcolor($theme-color, $font-color);
      background-color: setcolor($theme-color, $header-tone);
      border-color: setcolor($theme-color, $header-tone);

    } @else { /* Theme variations */
      @include background-color($theme-color, $header-tone);
      @include border-color($theme-color, $header-tone);
      @include color($theme-color, $font-color);
    }
  }
}

//----------------------------------*\
// ALERT
//----------------------------------*/
@mixin alert-theme($theme-color, $tone:base, $tone-hover:light, $tone-border:base, $font-color:font-color) {

  @if map-has-key($contextual, $theme-color) { /* Contextual variations */
    background-color: setcolor($theme-color, $tone);
    border-color: setcolor($theme-color, $tone-border);
    color: setcolor($theme-color, $font-color);
  } @else { /* Theme variations */
    @include background-color($theme-color, $tone);
    @include border-color($theme-color, $tone-border);
    @include color($theme-color, $font-color);
  }
  /*  &:hover {
      @if map-has-key($contextual, $theme-color) { !* Contextual variations *!
        background-color: setcolor($theme-color, $tone-hover);
      } @else { !* Theme variations *!
        @include background-color($theme-color, $tone-hover);
      }
    }*/

  /* Close button */
  @at-root &.alert-dismissible > .close {
    @if map-has-key($contextual, $theme-color) { /* Contextual variations */
      color: setcolor($theme-color, $font-color);
    } @else { /* Theme variations */
      @include color($theme-color, $font-color);
    }
  }

  /* Link color */
  & .alert-link {
    &,
    #{$a-tags} {
      @if map-has-key($contextual, $theme-color) { /* Contextual variations */
        color: setcolor($theme-color, $font-color);
      } @else { /* Theme variations */
        @include color($theme-color, $font-color);
      }
    }
  }
}
