// ================================================================================================
// File Name: mixins.scss
// Description: 
// ----------------------------------------------------------------------------------------------
// Item Name: xxx - Responsive Admin Theme
// Version: 1.2
// Author: MANOJ
// Author URL: http://www.themeforest.net/user/xxx
// ================================================================================================

//----------------------------------*\
// WIDTH
//----------------------------------*/
/*Usage @include size(10px, 20px), @include size(25px); Adapted from https://bumbu.github.io/sass-width-mixin/*/
@mixin size($width, $height...) {
  @if length($height) == 1 {
    height: $height;
    width: $width;
  } @else {
    height: $width;
    width: $width;
  }
}

//----------------------------------*\
// REM FONT SIZING 
//----------------------------------*/
/*Will convert pixels to ems because who thinks in rem? Adapted from https://css-tricks.com/snippets/css/less-mixin-for-rem-font-sizing/
Usage @include font-size(1.6); */

//@mixin font-size($size-value: 1.6) {
//  font-size: ($size-value * 10) + px;
//  font-size: $size-value + rem;
//}

//----------------------------------*\
// REM FONT SIZING  - ADVANCED
//----------------------------------*/
/*Adapted from http://www.stubbornella.org/content/2013/07/01/easy-peasy-rem-conversion-with-sass/
Usage @include fontSize(16px);*/

@mixin font-size($size) {
  font-size: $size; //Fallback in px
  font-size: calculateRem($size);
}

//----------------------------------*\
// TEXT SHADOW
//----------------------------------*/
@mixin text-shadow($tShadow : 0px 1px 3px rgba(0,0,0,.5)) {
  -webkit-box-shadow: $tShadow;
  -moz-box-shadow: $tShadow;
  -o-box-shadow: $tShadow;
  box-shadow: $tShadow;
}

//----------------------------------*\
// TRANSITIONS
//----------------------------------*/
/*Usage @include transition(color .3s ease); @include transition;*/
@mixin transition($transitionvalue : all .25s ease-in-out) {
  -webkit-transition: $transitionvalue;
  -o-transition: $transitionvalue;
  -moz-transition: $transitionvalue;
  transition: $transitionvalue;
}

//----------------------------------*\
// BORDER RADIUS
//----------------------------------*/
/*Usage @include border-radius(4px);*/
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}

//----------------------------------*\
// BORDER
//----------------------------------*/
/*Usage
@include add-border(1px, #cccccc,top);
@include add-border(1px, #cccccc,right-left);
@include add-border(1px, #cccccc, all);*/
@mixin add-border($size, $color, $position) {
  @if $position == 'all' {
    border: $size solid $color;
  } @else if $position == 'top' {
    border-top: $size solid $color;
  } @else if $position == 'bottom' {
    border-bottom: $size solid $color;
  } @else if $position == 'right' {
    border-right: $size solid $color;
  } @else if $position == 'left' {
    border-left: $size solid $color;
  } @else if $position == 'top-bottom' {
    border-top: $size solid $color;
    border-bottom: $size solid $color;
  } @else if $position == 'right-left' {
    border-left: $size solid $color;
    border-right: $size solid $color;
  }
}

//----------------------------------*\
// NO IDEAAAAAAAAA
//----------------------------------*/

@mixin vendor($property, $value...) {
  -webkit-#{$property}: $value;
  -moz-#{$property}: $value;
  -ms-#{$property}: $value;
  -o-#{$property}: $value;
  #{$property}: $value;
}

//----------------------------------*\
// THEMIFY - OLD
//----------------------------------*/
/*Usage  @include themi { background-color: themi-variable('sidebar-menu-bg');}*/
@mixin themi($theme-collection: $theme-collection) {
  @each $theme, $map in $theme-collection {
    .theme-#{$theme} & {
      /*Define theme color*/
      $theme-map: (
              color-alpha: blue
      ) !global;

      @each $key, $submap in $map {
        $value: map-fetch($theme-collection, $theme '#{$key}');
        $theme-map: map-merge($theme-map, ($key: $value)) !global;
      }

      @content;
      /*Reset theme color to null*/
      $theme-map: null !global;
    }
  }
}

/*Function*/
@function map-fetch($map, $keys) {
  $key: nth($keys, 1);
  $length: length($keys);
  $value: map-get($map, $key);

  @if $value != null {
    @if $length > 1 {
      $rest: ();
      @for $i from 2 through $length {
        $rest: append($rest, nth($keys, $i))
      }

      @return map-fetch($value, $rest);
    } @else {
      @return $value;
    }
  } @else {
    @return false;
  }
}

@function themi-variable($key) {
  @return map-get($theme-map, $key);
}

//----------------------------------*\
// THEMIFY - NEW
//----------------------------------*/
/* Adapted from https://github.com/fjcalzado/DemoSeries-SASS-Easy-Theming, https://fjcalzado.github.io/DemoSeries-SASS-Easy-Theming/
 Usage:
 Mutiple properties: @include themify((background-color,box-shadow),(primary-color, shadow-dark));
 Single properties:  @include themify(color, text-color-light);

 Single Themify mixin. It accepts several properties and keys.
 @param {List} $properties: Properties to themify.
 @param {List} $keys: Theme items to map properies against to.
 @param $transition-duration: Duration in seconds for transition effect.
 @param {Map} $themes [$themes] - Map of themes to use.*/
@mixin themify-v($properties, $keys, $transition-duration: $theme-transition-duration, $themes: $theme-collection) {
  /*Iterate over the themes.*/
  @each $theme, $theme-item in $themes {
    /*Create a selector CLASS -> THEME and also THEME -> CLASS.*/
    &.theme-#{$theme},
    .theme-#{$theme} & {
      /*Iterate over each property-key value.*/
      @for $i from 1 through length($properties) {
        $property: nth($properties, $i);
        $key: nth($keys, $i);
        #{$property}: map-get-strict($theme-item, $key); /*Will throw error if values not found.*/
      }
      /* Finally add transitions over themified properties.
       transition-property: #{$properties};
       transition-duration: $transition-duration;*/
    }
  }
}

/* Device specific media query helper.
 @param $materialize-device: device out of mobile, tablet or desktop.
 Usage sample https://www.sassmeister.com/gist/307f690b022e44917704*/
$materialize-mobile-brkpnt: 600px;
$materialize-tablet-brkpnt: 992px;

@mixin respond-to($materialize-device) {
  @if $materialize-device == mobile {
    @media screen and (max-width: $materialize-mobile-brkpnt) {
      @content;
    }
  } @else if $materialize-device == tablet {
    @media screen and (min-width: $materialize-mobile-brkpnt + 1) and (max-width: $materialize-tablet-brkpnt) {
      @content;
    }
  } @else if $materialize-device == desktop {
    @media screen and (min-width: $materialize-tablet-brkpnt + 1) {
      @content;
    }
  }
}


//----------------------------------*\
// THEMIFY - NEW v1
//----------------------------------*/
/*Adapted from https://codepen.io/puglyfe/pen/ZLJmba*/


//TO DO: Find a way to replace below list of long keys
@mixin themify($context: '.color-theme') {

  @each $theme, $theme-item in $color-themes {
    #{$context}--#{$theme} & {

      $font__primary:                          map-get($theme-item, 'font__primary') !global;

      $color__primary--light:                  map-get($theme-item, 'color__primary--light') !global;
      $color__primary--x-light:                map-get($theme-item, 'color__primary--x-light') !global;
      $color__primary--xx-light:               map-get($theme-item, 'color__primary--xx-light') !global;
      $color__primary:                         map-get($theme-item, 'color__primary') !global;
      $color__primary--dark:                   map-get($theme-item, 'color__primary--dark') !global;
      $color__primary--x-dark:                 map-get($theme-item, 'color__primary--x-dark') !global;
      $color__primary--xx-dark:                map-get($theme-item, 'color__primary--xx-dark') !global;
      $text--color--primary:                   map-get($theme-item, 'text--color--primary') !global;

      $color__secondary--light:                map-get($theme-item, 'color__secondary--light') !global;
      $color__secondary--x-light:              map-get($theme-item, 'color__secondary--x-light') !global;
      $color__secondary--xx-light:             map-get($theme-item, 'color__secondary--xx-light') !global;
      $color__secondary:                       map-get($theme-item, 'color__secondary') !global;
      $color__secondary--dark:                 map-get($theme-item, 'color__secondary--dark') !global;
      $color__secondary--x-dark:               map-get($theme-item, 'color__secondary--x-dark') !global;
      $color__secondary--xx-dark:              map-get($theme-item, 'color__secondary--xx-dark') !global;
      $text--color--secondary:                 map-get($theme-item, 'text--color--secondary') !global;

      $color__success:                         map-get($theme-item, 'color__success') !global;
      $color__info:                            map-get($theme-item, 'color__info') !global;
      $color__warning:                         map-get($theme-item, 'color__warning') !global;
      $color__danger:                          map-get($theme-item, 'color__danger') !global;

      $sidebar--bg:                            map-get($theme-item, 'sidebar--bg') !global;
      $sidebar-menu--color:                    map-get($theme-item, 'sidebar-menu--color') !global;

      $header--bg:                             map-get($theme-item, 'sidebar--bg') !global;
      $header-menu--color:                     map-get($theme-item, 'sidebar-menu--color') !global;


      @content;

      // don't allow these variables to be used outside the context of this mixin.
      $color-primary:                         null !global;
      $color-primary-text:                    null !global;
      $color-secondary:                       null !global;
      $color-secondary-text:                  null !global;
      $color-button-primary:                  null !global;
      $color-button-primary-icon:             null !global;
      $color-button-secondary:                null !global;
    }
  }
}
